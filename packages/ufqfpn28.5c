/*
 * Copyright Â© 2012 Keith Packard <keithp@keithp.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

load "footprint.5c"
import Footprint;

real pad_width = 0.55;
real corner_pad_width = 0.50;
real pad_height = 0.30;

/* Required clearance between corner pads on the diagonal */
real corner_diag_clearance = 0.21;

/* horizontal/vertical size of corner cut out */
#real corner_pad_notch = corner_diag_clearance / sqrt(2);
real corner_pad_notch = 0.15;

real corner_pad_minimum_height = pad_height - corner_pad_notch;
real corner_pad_minimum_width = corner_pad_width - corner_pad_notch;

real pad_spacing = 0.50;

/* outer location of pad */

real pad_x_off = (3.30 + 2 * 0.5) / 2;
real pad_y_off = (3.30 + 2 * 0.5) / 2;

real package_width = 4;
real package_height = 4;

real num_pad = 7;	/* per side */

element_start("ufqfpn-28");

real pad_off(int n) {
	return pad_spacing * (n - (num_pad - 1) / 2);
}

real corner(int dx, int dy) {
	real	x = dx * package_width / 2;
	real	y = dy * package_height / 2;
	real	len = 0.4;

	line(x, y, x - dx * len, y);
	line(x, y, x, y - dy * len);
}

/*
corner(-1, -1);
corner(1, -1);
corner(-1, 1);
corner(1, 1);
*/

real dot_off = .3;

line(-package_width/2 - dot_off, -package_height/2 - dot_off,
     -package_width/2 - dot_off, -package_height/2 - dot_off);

for (int pad = 0; pad < num_pad; pad++) {
	real pw = pad_width;
	real ph = pad_height;
	real pwa = 0;
	real pha = 0;

	int	nstep = 0;

	if (pad == 0 || pad == num_pad-1)
		nstep = 3;

	for (int s = 0; s <= nstep; s++) {

		real	pad_x, pad_y, pad_w, pad_h;

		if (nstep != 0) {
			real	ratio = s / nstep;

			pad_x = 0;
			if (pad == 0) {
				pad_y = -pad_height / 2 * (1-ratio) + ((-pad_height / 2) + corner_pad_notch) * ratio;
			} else {
				pad_y = -pad_height / 2;
			}
			pad_w = corner_pad_minimum_width * (1-ratio) + corner_pad_width * ratio;

			pad_h = pad_height * (1 - ratio) + corner_pad_minimum_height * ratio;

			/* Make sure we don't violate the process minimums */
			if (pad_h < process_trace)
				pad_h = process_trace;

		} else {
			pad_x = 0;
			pad_y = -pad_height / 2;
			pad_w = pad_width;
			pad_h = pad_height;
		}

		/* left (1-7) */
		pad_mm(-pad_x_off + pad_x + pad_w / 2,
		       pad_off(pad) + pad_y + pad_h / 2,
		       pad_w,
		       pad_h,
		       sprintf("%d", pad + 1),
		       sprintf("%d", pad + 1));

		/* bottom (8-14) */

		pad_mm(pad_off(pad) + pad_y + pad_h / 2,
		       pad_y_off + pad_x - pad_w / 2,
		       pad_h,
		       pad_w,
		       sprintf("%d", pad + 8),
		       sprintf("%d", pad + 8));

		/* right side (15-21) */

		pad_mm(pad_x_off - pad_x - pad_w / 2,
		       -pad_off(pad) - pad_y - pad_h / 2,
		       pad_w,
		       pad_h,
		       sprintf("%d", pad + 15),
		       sprintf("%d", pad + 15));

		/* top (22-28) */

		pad_mm(-pad_off(pad) - pad_y - pad_h / 2,
		       -pad_y_off - pad_x + pad_w / 2,
		       pad_h,
		       pad_w,
		       sprintf("%d", pad + 22),
		       sprintf("%d", pad + 22));
	}

}

element_end();
